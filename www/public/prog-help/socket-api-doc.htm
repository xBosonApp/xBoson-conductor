<style type="text/css">
h4 {
  margin: 50px 0 25px 0;
}
</style>

<h3>TCP Socket Object API</h3>

<pre style='padding: 50px; padding-right: 200px'>

<h4>socket.bufferSize#</h4>
net.Socket has the property that socket.write() always works. This is to help users get up and running quickly. The computer cannot always keep up with the amount of data that is written to a socket - the network connection simply might be too slow. Node will internally queue up the data written to a socket and send it out over the wire when it is possible. (Internally it is polling on the socket's file descriptor for being writable).

The consequence of this internal buffering is that memory may grow. This property shows the number of characters currently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written, but the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)

Users who experience large or growing bufferSize should attempt to "throttle" the data flows in their program with pause() and resume().

<h4>socket.setEncoding([encoding])#</h4>
Set the encoding for the socket as a Readable Stream. See stream.setEncoding() for more information.

<h4>socket.write(data[, encoding][, callback])#</h4>
Sends data on the socket. The second parameter specifies the encoding in the case of a string--it defaults to UTF8 encoding.

Returns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is again free.

The optional callback parameter will be executed when the data is finally written out - this may not be immediately.

<h4>socket.end([data][, encoding])#</h4>
Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.

If data is specified, it is equivalent to calling socket.write(data, encoding) followed by socket.end().

<h4>socket.destroy()#</h4>
Ensures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).

<h4>socket.pause()#</h4>
Pauses the reading of data. That is, 'data' events will not be emitted. Useful to throttle back an upload.

<h4>socket.resume()#</h4>
Resumes reading after a call to pause().

<h4>socket.setTimeout(timeout[, callback])#</h4>
Sets the socket to timeout after timeout milliseconds of inactivity on the socket. By default net.Socket do not have a timeout.

When an idle timeout is triggered the socket will receive a 'timeout' event but the connection will not be severed. The user must manually end() or destroy() the socket.

If timeout is 0, then the existing idle timeout is disabled.

The optional callback parameter will be added as a one time listener for the 'timeout' event.

<h4>socket.setNoDelay([noDelay])#</h4>
Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off. Setting true for noDelay will immediately fire off data each time socket.write() is called. noDelay defaults to true.

<h4>socket.setKeepAlive([enable][, initialDelay])#</h4>
Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket. enable defaults to false.

Set initialDelay (in milliseconds) to set the delay between the last data packet received and the first keepalive probe. Setting 0 for initialDelay will leave the value unchanged from the default (or previous) setting. Defaults to 0.

<h4>socket.address()#</h4>
Returns the bound address, the address family name and port of the socket as reported by the operating system. Returns an object with three properties, e.g. { port: 12346, family: 'IPv4', address: '127.0.0.1' }

<h4>socket.unref()#</h4>
Calling unref on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already unrefd calling unref again will have no effect.

<h4>socket.ref()#</h4>
Opposite of unref, calling ref on a previously unrefd socket will not let the program exit if it's the only socket left (the default behavior). If the socket is refd calling ref again will have no effect.

<h4>socket.remoteAddress#</h4>
The string representation of the remote IP address. For example, '74.125.127.100' or '2001:4860:a005::68'.

<h4>socket.remoteFamily#</h4>
The string representation of the remote IP family. 'IPv4' or 'IPv6'.

<h4>socket.remotePort#</h4>
The numeric representation of the remote port. For example, 80 or 21.

<h4>socket.localAddress#</h4>
The string representation of the local IP address the remote client is connecting on. For example, if you are listening on '0.0.0.0' and the client connects on '192.168.1.1', the value would be '192.168.1.1'.

<h4>socket.localPort#</h4>
The numeric representation of the local port. For example, 80 or 21.

<h4>socket.bytesRead#</h4>
The amount of received bytes.

<h4>socket.bytesWritten#</h4>
The amount of bytes sent.

net.Socket instances are EventEmitter with the following events:

<h4>Event: 'lookup'#</h4>
Emitted after resolving the hostname but before connecting. Not applicable to UNIX sockets.

err {Error | Null} The error object. See dns.lookup().
address {String} The IP address.
family {String | Null} The address type. See dns.lookup().

<h4>Event: 'connect'#</h4>
Emitted when a socket connection is successfully established. See connect().

<h4>Event: 'data'#</h4>
Buffer object
Emitted when data is received. The argument data will be a Buffer or String. Encoding of data is set by socket.setEncoding(). (See the Readable Stream section for more information.)

Note that the data will be lost if there is no listener when a Socket emits a 'data' event.

<h4>Event: 'end'#</h4>
Emitted when the other end of the socket sends a FIN packet.

By default (allowHalfOpen == false) the socket will destroy its file descriptor once it has written out its pending write queue. However, by setting allowHalfOpen == true the socket will not automatically end() its side allowing the user to write arbitrary amounts of data, with the caveat that the user is required to end() their side now.

<h4>Event: 'timeout'#</h4>
Emitted if the socket times out from inactivity. This is only to notify that the socket has been idle. The user must manually close the connection.

See also: socket.setTimeout()

<h4>Event: 'drain'#</h4>
Emitted when the write buffer becomes empty. Can be used to throttle uploads.

See also: the return values of socket.write()

<h4>Event: 'error'#</h4>
Error object
Emitted when an error occurs. The 'close' event will be called directly following this event.

<h4>Event: 'close'#</h4>
had_error Boolean true if the socket had a transmission error
Emitted once the socket is fully closed. The argument had_error is a boolean which says if the socket was closed due to a transmission error.

</pre>